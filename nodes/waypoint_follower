#!/usr/bin/env python
from xmlrpc.client import FastUnmarshaller
import rospy
import numpy as np
import math
import threading

from hippocampus_common.node import Node

from std_msgs.msg import Float64, Bool, Int64
from geometry_msgs.msg import Point
from hippocampus_msgs.msg import GantryMotorPosition
from hippocampus_msgs.srv import GetBool, GetBoolResponse
from std_srvs.srv import Trigger, TriggerResponse
import collections

ALL_AXES = ["x", "y", "z"]


class PositionReachedDebouncer():
    def __init__(self, n_debounce) -> None:
        self.state = False
        self.n_debounce = n_debounce
        self.debounce_array = collections.deque([False] * self.n_debounce,
                                                maxlen=self.n_debounce)
        self.rising_edge = False
        self.falling_edge = False

    def update(self, new_state: bool):
        self.debounce_array.append(new_state)
        if all(self.debounce_array):
            if not self.state:
                self.rising_edge = True
                self.state = True
            else:
                self.rising_edge = False
        elif not any(self.debounce_array):
            if self.state:
                self.falling_edge = True
                self.state = False
            else:
                self.falling_edge = False

    def set(self, new_state: bool):
        self.state = new_state
        self.debounce_array = collections.deque([new_state] * self.n_debounce)


class WayPointFollower(Node):
    N_DEBOUNCE = 5

    def __init__(self, name):
        super(WayPointFollower, self).__init__(name=name)

        self.data_lock = threading.RLock()
        self.waypoints = self.get_path()
        tmp = self.get_param("~start_position",
                             default=dict(x=1.0, y=2.0, z=-0.5))
        self.start_position = [tmp["x"], tmp["y"], tmp["z"]]
        self.loop = self.get_param("~loop", default=False)
        self.target_index = 0
        self.speed = 0.0
        self.look_ahead_square = 0.0
        self.current_position = np.array([0.0, 0.0, 0.0])
        self.target_position = np.array([0.0, 0.0, 0.0])
        self.running = False
        self.position_updated = False
        self.position_reached = {
            "x": PositionReachedDebouncer(self.N_DEBOUNCE),
            "y": PositionReachedDebouncer(self.N_DEBOUNCE),
            "z": PositionReachedDebouncer(self.N_DEBOUNCE)
        }

        self.wait_time_start = rospy.Time.now()
        self.wait_time = rospy.Duration(5.0)
        self.waited_for_measurement = False
        self.last_time_position_reached = True
        self.updated_target_index = False

        self.current_position_pub = rospy.Publisher("~current_position",
                                                    Point,
                                                    queue_size=1)
        self.target_position_pub = rospy.Publisher("~target_position",
                                                   Point,
                                                   queue_size=1)
        self.position_reached_pub = rospy.Publisher("position_reached",
                                                    Bool,
                                                    queue_size=1)

        self.target_index_pub = rospy.Publisher("~target_index",
                                                Int64,
                                                queue_size=1)

        self.move_to_start_position_service = rospy.Service(
            "~move_to_start_position", Trigger,
            self.serve_move_to_start_position)

        self.start_service = rospy.Service("~start", Trigger, self.serve_start)
        self.stop_service = rospy.Service("~stop", Trigger, self.serve_stop)
        self.update_path_service = rospy.Service("~update_path", Trigger,
                                                 self.serve_update_path)

        self.is_position_reached_services = self.init_position_reached_services(
            persistent=True)

        self.first_position_send = False

        self.motor_pos_x_pub = rospy.Publisher(
            "motor_x/setpoint_position/absolute", Float64, queue_size=1)
        self.motor_pos_y_pub = rospy.Publisher(
            "motor_y/setpoint_position/absolute", Float64, queue_size=1)
        self.motor_pos_z_pub = rospy.Publisher(
            "motor_z/setpoint_position/absolute", Float64, queue_size=1)

        self.motor_speed_x_pub = rospy.Publisher("motor_x/setpoint_velocity",
                                                 Float64,
                                                 queue_size=1)
        self.motor_speed_y_pub = rospy.Publisher("motor_y/setpoint_velocity",
                                                 Float64,
                                                 queue_size=1)
        self.motor_speed_z_pub = rospy.Publisher("motor_z/setpoint_velocity",
                                                 Float64,
                                                 queue_size=1)

        self.pos_x_sub = rospy.Subscriber(
            "motor_x/position", GantryMotorPosition,
            (lambda msg: self.on_position(msg, 0)))
        self.pos_y_sub = rospy.Subscriber(
            "motor_y/position", GantryMotorPosition,
            (lambda msg: self.on_position(msg, 1)))
        self.pos_z_sub = rospy.Subscriber(
            "motor_z/position", GantryMotorPosition,
            (lambda msg: self.on_position(msg, 2)))

    def init_position_reached_services(self, persistent):
        axes = ["x", "y", "z"]
        services = {}
        for axis in axes:
            service_name = f"motor_{axis}/is_position_reached"
            rospy.loginfo("Waiting for [%s] service...", service_name)
            rospy.wait_for_service(service_name)
            rospy.loginfo("Service [%s] is available.", service_name)
            services[axis] = rospy.ServiceProxy(service_name,
                                                GetBool,
                                                persistent=persistent)
        return services

    def on_position(self, msg, axis):
        with self.data_lock:
            self.current_position[axis] = msg.position
            self.position_updated = True

    def serve_dynamic_reconfigure(self, config, level):
        with self.data_lock:
            self.look_ahead_square = config["look_ahead_distance"]**2
            self.speed = config["speed"]
        return config

    def get_path(self):
        path_list = self.get_param("~path")
        path = np.zeros([len(path_list), 3], dtype=float)
        for (i, point) in enumerate(path_list):
            path[i] = np.array([point["x"], point["y"], point["z"]])
        return path

    def update_path(self):
        self.path = self.get_path()
        tmp = self.get_param("~start_position",
                             default=dict(x=1.0, y=2.0, z=-0.5))
        self.start_position = [tmp["x"], tmp["y"], tmp["z"]]
        self.loop = self.get_param("~loop", default=True)
        self.target_index = 0

    def serve_start(self, req):
        with self.data_lock:
            self.running = True
            self.target_index = 0
            self.publish_position_setpoint(self.waypoints[self.target_index])
        return TriggerResponse(True, "Started path following!")

    def serve_stop(self, req):
        with self.data_lock:
            self.running = False
            self.publish_speed_setpoint([0, 0, 0])
        return TriggerResponse(True, "Stopped path following!")

    def serve_move_to_start_position(self, req):
        with self.data_lock:
            self.running = False
            text = "Moving to start position ({:.2f}, {:.2f}, {:.2f})".format(
                self.start_position[0], self.start_position[1],
                self.start_position[2])
            self.publish_position_setpoint(self.start_position)
        return TriggerResponse(True, text)

    def serve_update_path(self, req):
        with self.data_lock:
            if self.running:
                ret = TriggerResponse(False,
                                      "Cannot update path while running.")
            else:
                self.update_path()
                ret = TriggerResponse(True, "Updated the path.")

        return ret

    def call_positions_reached(self, axis, tries):
        for i in range(tries):
            response = self.is_position_reached_services[axis]()
            if not response.success:
                rospy.logerr(
                    "Failed to call position reached service for axis "
                    "[%s]!", axis)
            else:
                break
        return response

    def update_positions_reached(self):
        for axis in ALL_AXES:
            response = self.call_positions_reached(axis, 3)
            if not response.success:
                rospy.logfatal("Giving up to call service for axis [%s]", axis)
                self.position_reached[axis].update(False)
            else:
                self.position_reached[axis].update(response.value)
            if self.position_reached[axis].rising_edge:
                rospy.loginfo("[%s-axis] Rising edge in position_reached.",
                              axis)
            elif self.position_reached[axis].rising_edge:
                rospy.loginfo("[%s-axis] Falling edge in position_reached.",
                              axis)

    def all_positions_reached(self):
        for axis in ALL_AXES:
            if not self.position_reached[axis].state:
                return False
        return True

    def need_to_wait(self):
        return self.wait_time_start + self.wait_time > rospy.Time.now()

    def publish_next_position_target(self):
        self.target_index += 1
        if self.target_index >= len(self.waypoints):
            rospy.loginfo("Finished!")
            self.target_index -= 1
            self.running = False
            return False
        rospy.loginfo("Moving to waypoint [%d/%d]", self.target_index,
                      len(self.waypoints) - 1)

        # make your we do not have wrong values due to unlucky timing. Since
        # we publish a new setpoint, we know the position won't be reached
        # in the next timestep.
        for axis in ALL_AXES:
            self.position_reached[axis].set(False)
        self.publish_position_setpoint(self.waypoints[self.target_index])
        return True

    def republish_position_target(self):
        if self.target_index >= len(self.waypoints):
            return
        self.publish_position_setpoint(self.waypoints[self.target_index])

    def update_control(self):
        self.update_positions_reached()
        is_position_reached = self.all_positions_reached()
        self.position_reached_pub.publish(Bool(is_position_reached))
        if is_position_reached:
            if self.last_time_position_reached:
                if self.need_to_wait():
                    return
                else:
                    self.publish_next_position_target()
            # we just arrived at the waypoint.
            else:
                self.wait_time_start = rospy.Time.now()
        else:
            self.republish_position_target()
        self.last_time_position_reached = is_position_reached
        self.publish_debug(self.current_position,
                           self.waypoints[self.target_index])

    def publish_speed_setpoint(self, speed):
        self.motor_speed_x_pub.publish(Float64(speed[0]))
        self.motor_speed_y_pub.publish(Float64(speed[1]))
        self.motor_speed_z_pub.publish(Float64(speed[2]))

    def publish_position_setpoint(self, position):
        self.motor_pos_x_pub.publish(Float64(position[0]))
        self.motor_pos_y_pub.publish(Float64(position[1]))
        self.motor_pos_z_pub.publish(Float64(position[2]))

    def publish_debug(self, current_position, target_position):
        c = Point()
        c.x = current_position[0]
        c.y = current_position[1]
        c.z = current_position[2]
        self.current_position_pub.publish(c)
        t = Point()
        t.x = target_position[0]
        t.y = target_position[1]
        t.z = target_position[2]
        self.target_position_pub.publish(t)
        self.target_index_pub.publish(Int64(self.target_index))

    def run(self):
        hz = self.get_param("~rate", default=20.0)
        rate = rospy.Rate(hz)

        while not rospy.is_shutdown():
            with self.data_lock:
                if self.running:
                    self.update_control()
                self.publish_debug(self.current_position,
                                   self.waypoints[self.target_index])
            rate.sleep()


def main():
    node = WayPointFollower("way_point_follower")
    node.run()


if __name__ == "__main__":
    main()
