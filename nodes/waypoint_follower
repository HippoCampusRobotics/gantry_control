#!/usr/bin/env python
from xmlrpc.client import FastUnmarshaller
import rospy
import numpy as np
import math
import threading

from hippocampus_common.node import Node

from std_msgs.msg import Float64, Bool, Int64
from geometry_msgs.msg import Point
from hippocampus_msgs.msg import GantryMotorPosition
from hippocampus_msgs.srv import GetBool, GetBoolResponse
from std_srvs.srv import Trigger, TriggerResponse


class WayPointFollower(Node):

    def __init__(self, name):
        super(WayPointFollower, self).__init__(name=name)

        self.data_lock = threading.RLock()
        self.waypoints = self.get_path()
        tmp = self.get_param("~start_position",
                             default=dict(x=1.0, y=2.0, z=-0.5))
        self.start_position = [tmp["x"], tmp["y"], tmp["z"]]
        self.loop = self.get_param("~loop", default=False)
        self.target_index = 0
        self.number_waypoints = self.waypoints.shape[0]
        self.speed = 0.0
        self.look_ahead_square = 0.0
        self.current_position = np.array([0.0, 0.0, 0.0])
        self.target_position = np.array([0.0, 0.0, 0.0])
        self.running = False
        self.position_updated = False
        self.position_reached = False

        self.wait_time_start = rospy.Time.now()
        self.wait_time = rospy.Duration(5.0)
        self.waited_for_measurement = False
        self.first_time_reached_wp = True
        self.updated_target_index = False

        self.current_position_pub = rospy.Publisher("~current_position",
                                                    Point,
                                                    queue_size=1)
        self.target_position_pub = rospy.Publisher("~target_position",
                                                   Point,
                                                   queue_size=1)
        self.position_reached_pub = rospy.Publisher("position_reached",
                                                    Bool,
                                                    queue_size=1)

        self.target_index_pub = rospy.Publisher("~target_index",
                                                Int64,
                                                queue_size=1)

        self.move_to_start_position_service = rospy.Service(
            "~move_to_start_position", Trigger,
            self.serve_move_to_start_position)

        self.start_service = rospy.Service("~start", Trigger, self.serve_start)
        self.stop_service = rospy.Service("~stop", Trigger, self.serve_stop)
        self.update_path_service = rospy.Service("~update_path", Trigger,
                                                 self.serve_update_path)

        rospy.wait_for_service('motor_z/is_position_reached')
        self.motor_x_is_position_reached = rospy.ServiceProxy(
            "motor_x/is_position_reached", GetBool, persistent=True)
        self.motor_y_is_position_reached = rospy.ServiceProxy(
            "motor_y/is_position_reached", GetBool, persistent=True)
        self.motor_z_is_position_reached = rospy.ServiceProxy(
            "motor_z/is_position_reached", GetBool, persistent=True)

        self.x_position_reached = False
        self.y_position_reached = False
        self.z_position_reached = False

        self.first_position_send = False

        self.motor_pos_x_pub = rospy.Publisher(
            "motor_x/setpoint_position/absolute", Float64, queue_size=1)
        self.motor_pos_y_pub = rospy.Publisher(
            "motor_y/setpoint_position/absolute", Float64, queue_size=1)
        self.motor_pos_z_pub = rospy.Publisher(
            "motor_z/setpoint_position/absolute", Float64, queue_size=1)

        self.motor_speed_x_pub = rospy.Publisher("motor_x/setpoint_velocity",
                                                 Float64,
                                                 queue_size=1)
        self.motor_speed_y_pub = rospy.Publisher("motor_y/setpoint_velocity",
                                                 Float64,
                                                 queue_size=1)
        self.motor_speed_z_pub = rospy.Publisher("motor_z/setpoint_velocity",
                                                 Float64,
                                                 queue_size=1)

        self.pos_x_sub = rospy.Subscriber(
            "motor_x/position", GantryMotorPosition,
            (lambda msg: self.on_position(msg, 0)))
        self.pos_y_sub = rospy.Subscriber(
            "motor_y/position", GantryMotorPosition,
            (lambda msg: self.on_position(msg, 1)))
        self.pos_z_sub = rospy.Subscriber(
            "motor_z/position", GantryMotorPosition,
            (lambda msg: self.on_position(msg, 2)))

    def on_position(self, msg, axis):
        with self.data_lock:
            self.current_position[axis] = msg.position
            self.position_updated = True

    def serve_dynamic_reconfigure(self, config, level):
        with self.data_lock:
            self.look_ahead_square = config["look_ahead_distance"]**2
            self.speed = config["speed"]
        return config

    def get_path(self):
        path_list = self.get_param("~path")
        path = np.zeros([len(path_list), 3], dtype=float)
        for (i, point) in enumerate(path_list):
            path[i] = np.array([point["x"], point["y"], point["z"]])
        return path

    def update_path(self):
        self.path = self.get_path()
        tmp = self.get_param("~start_position",
                             default=dict(x=1.0, y=2.0, z=-0.5))
        self.start_position = [tmp["x"], tmp["y"], tmp["z"]]
        self.loop = self.get_param("~loop", default=True)
        self.target_index = 0

    def serve_start(self, req):
        with self.data_lock:
            self.running = True
        return TriggerResponse(True, "Started path following!")

    def serve_stop(self, req):
        with self.data_lock:
            self.running = False
            self.publish_speed([0, 0, 0])
        return TriggerResponse(True, "Stopped path following!")

    def serve_move_to_start_position(self, req):
        with self.data_lock:
            self.running = False
            text = "Moving to start position ({:.2f}, {:.2f}, {:.2f})".format(
                self.start_position[0], self.start_position[1],
                self.start_position[2])
            self.publish_position(self.start_position)
        return TriggerResponse(True, text)

    def serve_update_path(self, req):
        with self.data_lock:
            if self.running:
                ret = TriggerResponse(False,
                                      "Cannot update path while running.")
            else:
                self.update_path()
                ret = TriggerResponse(True, "Updated the path.")

        return ret

    def check_position_reached(self):
        # motor done driving?
        self.x_position_reached = self.motor_x_is_position_reached()
        self.y_position_reached = self.motor_y_is_position_reached()
        self.z_position_reached = self.motor_z_is_position_reached()

        if (self.x_position_reached and self.y_position_reached
                and self.z_position_reached):
            # actually reached correct wp?
            correct_x_position_reached = math.isclose(self.current_position[0],
                                                      self.target_position[0],
                                                      rel_tol=0.001)
            correct_y_position_reached = math.isclose(self.current_position[1],
                                                      self.target_position[1],
                                                      rel_tol=0.001)
            correct_z_position_reached = math.isclose(self.current_position[2],
                                                      self.target_position[2],
                                                      rel_tol=0.001)

            if (correct_x_position_reached and correct_y_position_reached
                    and correct_z_position_reached):
                self.position_reached = True
            else:
                self.position_reached = False
        else:
            self.position_reached = False

        self.position_reached_pub.publish(Bool(self.position_reached))

    def update_control(self):
        self.check_position_reached()

        if self.position_reached:

            if self.first_time_reached_wp:  # first time reaching wp

                self.first_time_reached_wp = False

                rospy.loginfo(
                    f"Reached target position with index {self.target_index}")
                rospy.loginfo(
                    f"Waiting for {self.wait_time.to_sec()} seconds!")

                self.wait_time_start = rospy.Time.now()

            else:  # still at same wp, do we still need to wait?
                now = rospy.Time.now()
                # rospy.loginfo(f"We're still at wp {self.target_index}, time now: {now}")
                # rospy.loginfo(f"Time difference: {self.wait_time_start - now}")

                if (now - self.wait_time_start
                    ) > self.wait_time and not self.updated_target_index:
                    # we have waited for the appropriate time
                    # let's go to next waypoint

                    self.target_index += 1
                    self.updated_target_index = True  # only want to do this once

                    rospy.loginfo(
                        f"Waited long enough! difference:  {(self.wait_time_start - now).to_sec()}"
                    )

                    # publish new target
                    if self.target_index < self.number_waypoints:
                        self.target_position = self.waypoints[
                            self.target_index]
                        self.publish_position(self.target_position)
                        rospy.loginfo(
                            f"Going to next waypoint at {self.waypoints[self.target_index]}"
                        )
                    else:
                        rospy.loginfo("Finished waypoint list!")

        else:  # currently moving or haven't started moving yet

            # reset variables
            self.first_time_reached_wp = True
            self.updated_target_index = False

        self.publish_debug(self.current_position,
                           self.waypoints[self.target_index])

    def publish_speed(self, speed):
        self.motor_speed_x_pub.publish(Float64(speed[0]))
        self.motor_speed_y_pub.publish(Float64(speed[1]))
        self.motor_speed_z_pub.publish(Float64(speed[2]))

    def publish_position(self, position):
        self.motor_pos_x_pub.publish(Float64(position[0]))
        self.motor_pos_y_pub.publish(Float64(position[1]))
        self.motor_pos_z_pub.publish(Float64(position[2]))

    def publish_debug(self, current_position, target_position):
        c = Point()
        c.x = current_position[0]
        c.y = current_position[1]
        c.z = current_position[2]
        self.current_position_pub.publish(c)
        t = Point()
        t.x = target_position[0]
        t.y = target_position[1]
        t.z = target_position[2]
        self.target_position_pub.publish(t)
        self.target_index_pub.publish(Int64(self.target_index))

    def run(self):
        hz = self.get_param("~rate", default=20.0)
        rate = rospy.Rate(hz)

        while not rospy.is_shutdown():
            with self.data_lock:
                if self.running:
                    if not self.first_position_send:
                        self.target_position = self.waypoints[0]
                        self.publish_position(self.target_position)
                        rospy.loginfo("First Waypoint set!")
                        self.first_position_send = True

                    self.update_control()

                self.publish_debug(self.current_position,
                                   self.waypoints[self.target_index])
            rate.sleep()


def main():
    node = WayPointFollower("way_point_follower")
    node.run()


if __name__ == "__main__":
    main()
