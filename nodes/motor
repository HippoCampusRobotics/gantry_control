#!/usr/bin/env python
import rospy
from gantry_control import faulhaber_rs232, mcbl2805
from hippocampus_common.node import Node
from std_msgs.msg import Float64
from hippocampus_msgs.msg import (GantryMotorPosition, GantryMotorVelocity,
                                  GantryMotorLimitSwitches)
from hippocampus_msgs.srv import (GetFloat, GetFloatResponse, SetFloat,
                                  SetFloatResponse)
from std_srvs.srv import Trigger, TriggerResponse
import threading


class MotorNode(Node):
    def __init__(self, name):
        """This node provides a ROS interface for the motors.

        Args:
            name (str): Name of the node.
        """
        super(MotorNode, self).__init__(name=name)

        self.data_lock = threading.RLock()
        self.motor_lock = threading.RLock()

        self.position_setpoint = dict(position=0.0, relative=True)
        self.position_setpoint_flag = False
        self.velocity_setpoint = dict(velocity=0.0)
        self.velocity_setpoint_flag = False

        self.emergency_stop = False

        self.increments_per_meter = self.get_param("~increments_per_meter")
        self.meter_per_second_per_rpm = self.get_param(
            "~meter_per_second_per_rpm")

        self.motor = self.init_motor()

        self.position_pub = rospy.Publisher("~position",
                                            GantryMotorPosition,
                                            queue_size=1)
        self.velocity_pub = rospy.Publisher("~velocity",
                                            GantryMotorVelocity,
                                            queue_size=1)

        self.limit_switch_pub = rospy.Publisher("~limit_switches",
                                                GantryMotorLimitSwitches,
                                                queue_size=1)

        self.start_homing_service = rospy.Service("~start_homing", Trigger,
                                                  self.serve_homing)

        self.set_home_position = rospy.Service("~set_home_position", Trigger,
                                               self.serve_set_home)
        self.get_max_velocity = rospy.Service("~get_max_velocity", GetFloat,
                                              self.serve_get_max_velocity)
        self.set_max_velocity = rospy.Service("~set_max_velocity", SetFloat,
                                              self.serve_set_max_velocity)
        self.estop_service = rospy.Service("~emergency_stop", Trigger,
                                           self.serve_emergency_stop)
        self.is_homing_service = rospy.Service("~is_homing", Trigger,
                                               self.serve_is_homing)

        self.enable_service = rospy.Service("~enable", Trigger,
                                            self.serve_enable)
        self.disable_service = rospy.Service("~disable", Trigger,
                                             self.serve_disable)

        self.release_estop_service = rospy.Service(
            "~release_emergency_stop", Trigger,
            self.serve_release_emergency_stop)

        self.position_setpoint_sub = rospy.Subscriber(
            "~setpoint_position/absolute", Float64, self.on_setpoint_position)
        self.position_setpoint_relative_sub = rospy.Subscriber(
            "~setpoint_position/relative", Float64,
            self.on_setpoint_position_relative)
        self.velocity_setpoint_sub = rospy.Subscriber("~setpoint_velocity",
                                                      Float64,
                                                      self.on_setpoint_velocity)

    def serve_set_home(self, req):
        with self.motor_lock:
            self.motor.set_home()
        return TriggerResponse(True, "Started homing sequence...")

    def init_motor(self):
        port = self.get_param("~serial_port")
        baud = self.get_param("~baud", 19200)
        timeout = self.get_param("~timeout", 1.0)
        legacy = self.get_param("~legacy", True)
        if legacy:
            motor = mcbl2805.Motor(port, baud, timeout)
        else:
            motor = faulhaber_rs232.Motor(port, baud, timeout)

        with self.motor_lock:
            pos_result = motor.get_position()
        self.position_setpoint = dict(position=(float(pos_result.value) /
                                                self.increments_per_meter),
                                      relative=False)
        return motor

    def on_setpoint_position(self, msg):
        with self.data_lock:
            self.position_setpoint = dict(position=msg.data, relative=False)
            self.position_setpoint_flag = True

    def on_setpoint_position_relative(self, msg):
        rospy.loginfo("Received relative position setpoint.")
        with self.data_lock:
            self.position_setpoint = dict(position=msg.data, relative=True)
            self.position_setpoint_flag = True

    def on_setpoint_velocity(self, msg):
        with self.data_lock:
            self.velocity_setpoint = dict(velocity=msg.data)
            self.velocity_setpoint_flag = True

    def run(self):
        hz = self.get_param("~rate", 30.0)
        rate = rospy.Rate(hz)
        counter = 0
        limit_switch_update = False

        while not rospy.is_shutdown():
            counter += 1
            with self.motor_lock:
                pos_result = self.motor.get_position()
                if not pos_result.success:
                    rospy.logerr(
                        "[%s] Could not get motor position. "
                        "Are all wires connected properly? "
                        "Is the motor powered?", rospy.get_name())
                vel_result = self.motor.get_velocity()
                if not vel_result.success:
                    rospy.logerr(
                        "[%s] Could not get motor speed. "
                        "Are all wires connected properly?"
                        "Is the motor powered?", rospy.get_name())
                if counter > hz:
                    counter = 0
                    limit_switch_update = True
                    lower_switch_result = self.motor.get_lower_limit_switch()
                    upper_switch_result = self.motor.get_upper_limit_switch()
            if limit_switch_update:
                limit_switch_update = False
                if not (lower_switch_result.success
                        and upper_switch_result.success):
                    rospy.logerr("[%s] Could not get limit switch states.",
                                 rospy.get_name())
                else:
                    self.publish_limit_switches(lower_switch_result.value,
                                                upper_switch_result.value)
            if pos_result.success:
                self.publish_position(pos_result.value)
            if vel_result.success:
                self.publish_velocity(vel_result.value)

            if not self.emergency_stop:
                if self.position_setpoint_flag:
                    self.position_setpoint_flag = False
                    self.move_to_position()
                if self.velocity_setpoint_flag:
                    self.velocity_setpoint_flag = False
                    self.move_with_velocity()

            else:
                rospy.logwarn_throttle(5.0, "Emergency stop active!")
                with self.motor_lock:
                    self.motor.set_velocity(0)

            rate.sleep()

    def move_with_velocity(self):
        with self.motor_lock:
            rpm = int(self.velocity_setpoint["velocity"] /
                      self.meter_per_second_per_rpm)
            self.motor.set_velocity(rpm)

    def move_to_position(self):
        increments = int(self.position_setpoint["position"] *
                         self.increments_per_meter)
        rospy.loginfo("Moving to %dinc / %.2fm", increments,
                      self.position_setpoint["position"])
        rospy.loginfo("Relative=%s", self.position_setpoint["relative"])
        with self.motor_lock:
            rospy.loginfo("Setting target.")
            self.motor.set_position_target(
                increments, relative=self.position_setpoint["relative"])
            rospy.loginfo("Setting")
            self.motor.move_to_target_position()

    def serve_homing(self, req):
        with self.motor_lock:
            self.motor.start_homing()
        return TriggerResponse(True, "Started homing sequence...")

    def serve_is_homing(self, req):
        with self.motor_lock:
            is_homing = self.motor.is_homing()
        return TriggerResponse(is_homing, "Homing status")

    def serve_get_max_velocity(self, req):
        with self.motor_lock:
            result = (float(self.motor.get_max_velocity()) *
                      self.meter_per_second_per_rpm)
        if result.success:
            return GetFloatResponse(value=result.value, success=True)
        return GetFloatResponse(success=True)

    def serve_set_max_velocity(self, req):
        with self.motor_lock:
            self.motor.set_max_velocity(
                int(req.value / self.meter_per_second_per_rpm))
        return SetFloatResponse(success=True)

    def serve_emergency_stop(self, req):
        with self.motor_lock:
            self.motor.set_velocity(0)
            self.emergency_stop = True
        return TriggerResponse(success=True, message="Stopping Motors!")

    def serve_release_emergency_stop(self, req):
        with self.motor_lock:
            self.emergency_stop = False
        return TriggerResponse(success=True, message="Released emergency stop.")

    def serve_enable(self, req):
        with self.motor_lock:
            self.motor.enable()
        return TriggerResponse(success=True, message="Enabled Motor.")

    def serve_disable(self, req):
        with self.motor_lock:
            self.motor.disable()
        return TriggerResponse(success=True, message="Disabled Motor.")

    def publish_position(self, increments):
        msg = GantryMotorPosition()
        msg.position = float(increments) / self.increments_per_meter
        msg.increments = increments
        self.position_pub.publish(msg)

    def publish_velocity(self, rpm):
        msg = GantryMotorVelocity()
        msg.velocity = float(rpm) * self.meter_per_second_per_rpm
        msg.rpm = rpm
        self.velocity_pub.publish(msg)

    def publish_limit_switches(self, lower_limit_switch, upper_limit_switch):
        msg = GantryMotorLimitSwitches()
        msg.lower_limit = lower_limit_switch
        msg.upper_limit = upper_limit_switch
        self.limit_switch_pub.publish(msg)


def main():
    node = MotorNode("motor")
    node.run()


if __name__ == "__main__":
    main()
